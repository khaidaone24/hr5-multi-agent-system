import asyncio
import os
try:
    from dotenv import load_dotenv
except ImportError:
    print("Warning: python-dotenv not installed")
    def load_dotenv(): pass

try:
    from langchain_google_genai import ChatGoogleGenerativeAI
except ImportError:
    print("Warning: langchain-google-genai not installed")
    ChatGoogleGenerativeAI = None

try:
    from mcp_use import MCPAgent, MCPClient
except ImportError:
    print("Warning: mcp_use not installed")
    MCPAgent = None
    MCPClient = None

async def main():
    # --- 1Ô∏è‚É£ Load bi·∫øn m√¥i tr∆∞·ªùng ---
    load_dotenv()
    DB_LINK = os.getenv("DB_LINK")
    GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

    if not DB_LINK or not GEMINI_API_KEY:
        raise ValueError("‚ö†Ô∏è Thi·∫øu DB_LINK ho·∫∑c GOOGLE_API_KEY trong .env")

    # --- 2Ô∏è‚É£ C·∫•u h√¨nh Postgres MCP Pro (qua uv) ---
    config = {
        "mcpServers": {
            "postgres": {
                "command": "uv",
                "args": [
                    "run",
                    "postgres-mcp",
                    "--access-mode=unrestricted",  # Cho ph√©p ƒë·ªçc/ghi & introspection
                ],
                "env": {
                    "DATABASE_URI": DB_LINK
                },
            }
        }
    }

    print("üöÄ ƒêang kh·ªüi t·∫°o MCP Client...")
    client = MCPClient.from_dict(config)
    await client.create_all_sessions()
    print("‚úÖ MCP Client ƒë√£ k·∫øt n·ªëi!\n")

    # --- 3Ô∏è‚É£ ƒê·ª£i MCP Server load schema ---
    print("‚è≥ ƒêang ƒë·ª£i MCP server load schema...\n")
    await asyncio.sleep(5)
    session = client.get_session("postgres")

    # --- 4Ô∏è‚É£ Li·ªát k√™ tool ---
    tools = await session.list_tools()
    print("üß∞ Tool kh·∫£ d·ª•ng:")
    for t in tools:
        print(f" - {t.name}: {t.description}")
    print("\n")

    # --- 5Ô∏è‚É£ T·∫£i danh s√°ch schema & b·∫£ng (warm-up introspection) ---
    print("üì¶ ƒêang ki·ªÉm tra schema v√† b·∫£ng...")
    schema_map = {}

    try:
        schemas = await session.call_tool("list_schemas", {})
        if schemas and schemas.content:
            print("‚úÖ Schema c√≥ s·∫µn:")
            print(schemas.content[0].text)

            # L·∫•y b·∫£ng trong schema 'public'
            tables = await session.call_tool("list_objects", {"schema_name": "public"})
            if tables and tables.content:
                text = tables.content[0].text
                print("\nüìä B·∫£ng c√≥ trong schema 'public':")
                print(text)

                # L∆∞u v√†o schema_map ƒë·ªÉ Agent hi·ªÉu ƒë√∫ng t√™n b·∫£ng
                for line in text.splitlines():
                    if "'name':" in line:
                        name = line.split("'name':")[1].split("'")[1]
                        schema_map[name.lower()] = "public"
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y danh s√°ch schema: {e}")

    # --- 6Ô∏è‚É£ Kh·ªüi t·∫°o Gemini LLM ---
    llm = ChatGoogleGenerativeAI(
        model="models/gemini-2.0-flash-lite",
        google_api_key=GEMINI_API_KEY,
        temperature=0.2,
    )

    # --- 7Ô∏è‚É£ T·∫°o MCP Agent ---
    agent = MCPAgent(llm=llm, client=client, max_steps=30)
    print("\nü§ñ Agent s·∫µn s√†ng nh·∫≠n truy v·∫•n!")

    # --- 8Ô∏è‚É£ V√≤ng l·∫∑p truy v·∫•n ---
    while True:
        query_text = input("\nüí¨ Nh·∫≠p truy v·∫•n (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ").strip()
        if query_text.lower() in ["exit", "quit"]:
            break

        print("\n‚è≥ ƒêang x·ª≠ l√Ω truy v·∫•n...\n")

        try:
            # G·ª£i √Ω LLM: bu·ªôc ki·ªÉm tra schema tr∆∞·ªõc khi ch·∫°y
            hint = (
                "H√£y d√πng list_schemas, get_object_details v√† list_objects ƒë·ªÉ x√°c ƒë·ªãnh ƒë√∫ng b·∫£ng, "
                "∆∞u ti√™n d√πng c√°c b·∫£ng trong schema 'public'. "
                
            )

            result = await agent.run(hint + query_text)
            print(f"\nüéØ K·∫øt qu·∫£:\n{result}\n")

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω truy v·∫•n: {e}")

    # --- 9Ô∏è‚É£ ƒê√≥ng k·∫øt n·ªëi ---
    await client.close_all_sessions()
    print("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MCP. H·∫πn g·∫∑p l·∫°i!")


if __name__ == "__main__":
    asyncio.run(main())
