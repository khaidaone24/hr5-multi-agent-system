#!/usr/bin/env python3
"""
Enhanced CV Agent v·ªõi kh·∫£ nƒÉng x·ª≠ l√Ω file PDF upload
"""

import asyncio
import os
import json
import re
from pathlib import Path
from typing import Dict, List, Any, Optional
try:
    import fitz  # PyMuPDF
except ImportError:
    print("Warning: PyMuPDF not installed")
    fitz = None
import pandas as pd
from dotenv import load_dotenv
import google.generativeai as genai
import time
from langchain_google_genai import ChatGoogleGenerativeAI

class EnhancedCVAgent:
    """
    Enhanced CV Agent - X·ª≠ l√Ω CV v·ªõi kh·∫£ nƒÉng upload file PDF
    """
    
    def __init__(self):
        load_dotenv()
        self.gemini_api_key = os.getenv("GOOGLE_API_KEY")
        
        if not self.gemini_api_key:
            raise ValueError("‚ö†Ô∏è Thi·∫øu GOOGLE_API_KEY trong .env")
        
        # Kh·ªüi t·∫°o Gemini AI
        genai.configure(api_key=self.gemini_api_key)
        self.model = genai.GenerativeModel('gemini-2.0-flash-lite')
        
        # Kh·ªüi t·∫°o LangChain LLM
        self.llm = ChatGoogleGenerativeAI(
            model="models/gemini-2.0-flash-lite",
            google_api_key=self.gemini_api_key,
            temperature=0.1,
        )
        
        # Th∆∞ m·ª•c l∆∞u CVs
        self.cv_dir = Path("cvs")
        self.cv_dir.mkdir(exist_ok=True)
        
        # Th∆∞ m·ª•c uploads
        self.upload_dir = Path("uploads")
        self.upload_dir.mkdir(exist_ok=True)
    
    def _has_cv_intent(self, user_input: str) -> bool:
        """Ki·ªÉm tra xem y√™u c·∫ßu c√≥ li√™n quan ƒë·∫øn CV kh√¥ng"""
        cv_keywords = [
            'cv', 'resume', 'h·ªì s∆°', '·ª©ng vi√™n', 'candidate', 
            'ph√¢n t√≠ch cv', 'ƒë√°nh gi√° cv', 'so s√°nh cv',
            'tuy·ªÉn d·ª•ng', 'recruitment', 'job application',
            'ph·ªèng v·∫•n', 'interview', 'screening'
        ]
        user_input_lower = user_input.lower()
        return any(keyword in user_input_lower for keyword in cv_keywords)
    
    def _extract_text_from_pdf(self, pdf_path: str) -> str:
        """Tr√≠ch xu·∫•t text t·ª´ file PDF"""
        if not fitz:
            return "L·ªói: PyMuPDF ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        
        try:
            doc = fitz.open(pdf_path)
            text = ""
            for page in doc:
                text += page.get_text()
            doc.close()
            return text
        except Exception as e:
            return f"L·ªói ƒë·ªçc PDF: {str(e)}"
    
    def _extract_cv_info(self, cv_text: str) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng t·ª´ CV"""
        try:
            prompt = f"""
            Ph√¢n t√≠ch CV sau v√† tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng:
            
            {cv_text[:3000]}  # Gi·ªõi h·∫°n ƒë·ªô d√†i ƒë·ªÉ tr√°nh l·ªói
            
            H√£y tr·∫£ v·ªÅ JSON v·ªõi format:
            {{
                "name": "T√™n ·ª©ng vi√™n",
                "email": "Email",
                "phone": "S·ªë ƒëi·ªán tho·∫°i",
                "skills": ["skill1", "skill2", ...],
                "experience_years": "S·ªë nƒÉm kinh nghi·ªám",
                "education": "H·ªçc v·∫•n",
                "current_position": "V·ªã tr√≠ hi·ªán t·∫°i",
                "summary": "T√≥m t·∫Øt ng·∫Øn g·ªçn"
            }}
            """
            
            response = self.model.generate_content(prompt)
            result_text = response.text
            
            # T√¨m JSON trong response
            json_match = re.search(r'\{.*\}', result_text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            else:
                return {
                    "name": "Unknown",
                    "email": "Unknown",
                    "phone": "Unknown",
                    "skills": [],
                    "experience_years": "Unknown",
                    "education": "Unknown",
                    "current_position": "Unknown",
                    "summary": "Kh√¥ng th·ªÉ ph√¢n t√≠ch CV"
                }
                
        except Exception as e:
            return {
                "name": "Unknown",
                "email": "Unknown", 
                "phone": "Unknown",
                "skills": [],
                "experience_years": "Unknown",
                "education": "Unknown",
                "current_position": "Unknown",
                "summary": f"L·ªói ph√¢n t√≠ch: {str(e)}"
            }
    
    async def _analyze_cv_with_ai(self, cv_text: str, user_requirement: str) -> str:
        """Ph√¢n t√≠ch CV b·∫±ng AI theo y√™u c·∫ßu c·ª• th·ªÉ"""
        try:
            prompt = f"""
            B·∫°n l√† m·ªôt chuy√™n gia HR v·ªõi 10 nƒÉm kinh nghi·ªám.
            
            Y√™u c·∫ßu: {user_requirement}
            
            CV c·∫ßn ph√¢n t√≠ch:
            {cv_text[:2000]}
            
            H√£y ph√¢n t√≠ch CV n√†y theo y√™u c·∫ßu v√† ƒë∆∞a ra:
            1. ƒê√°nh gi√° t·ªïng quan
            2. ƒêi·ªÉm m·∫°nh
            3. ƒêi·ªÉm y·∫øu
            4. Khuy·∫øn ngh·ªã
            5. ƒêi·ªÉm ph√π h·ª£p (1-10)
            
            Tr·∫£ v·ªÅ k·∫øt qu·∫£ c√≥ c·∫•u tr√∫c v√† d·ªÖ hi·ªÉu.
            """
            
            response = await self.llm.ainvoke(prompt)
            return response.content if hasattr(response, 'content') else str(response)
            
        except Exception as e:
            return f"L·ªói ph√¢n t√≠ch AI: {str(e)}"
    
    async def _process_uploaded_files(self, uploaded_files: List[str], user_input: str) -> Dict[str, Any]:
        """X·ª≠ l√Ω c√°c file PDF ƒë√£ upload"""
        try:
            results = []
            
            for filename in uploaded_files:
                filepath = self.upload_dir / filename
                if filepath.exists():
                    print(f"üìÑ CV Agent: Ph√¢n t√≠ch file {filename}")
                    
                    # Tr√≠ch xu·∫•t text t·ª´ PDF
                    cv_text = self._extract_text_from_pdf(str(filepath))
                    
                    if cv_text.startswith("L·ªói"):
                        results.append({
                            "filename": filename,
                            "error": cv_text
                        })
                        continue
                    
                    # Tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n
                    cv_info = self._extract_cv_info(cv_text)
                    
                    # Ph√¢n t√≠ch b·∫±ng AI
                    ai_analysis = await self._analyze_cv_with_ai(cv_text, user_input)
                    
                    results.append({
                        "filename": filename,
                        "cv_info": cv_info,
                        "ai_analysis": ai_analysis,
                        "text_length": len(cv_text)
                    })
                else:
                    results.append({
                        "filename": filename,
                        "error": "File kh√¥ng t·ªìn t·∫°i"
                    })
            
            return {
                "agent": "cv_agent",
                "status": "success",
                "result": {
                    "uploaded_files_analysis": results,
                    "total_files": len(uploaded_files),
                    "timestamp": asyncio.get_event_loop().time()
                }
            }
            
        except Exception as e:
            return {
                "agent": "cv_agent",
                "status": "error",
                "error": f"L·ªói x·ª≠ l√Ω file upload: {str(e)}"
            }
    
    async def _scan_all_cvs(self, user_input: str) -> Dict[str, Any]:
        """Qu√©t t·∫•t c·∫£ CV c√≥ s·∫µn trong h·ªá th·ªëng"""
        try:
            # T√¨m t·∫•t c·∫£ file PDF trong th∆∞ m·ª•c CVs
            pdf_files = list(self.cv_dir.glob("*.pdf"))
            
            if not pdf_files:
                return {
                    "agent": "cv_agent",
                    "status": "info",
                    "result": {
                        "message": "Kh√¥ng t√¨m th·∫•y file CV n√†o trong h·ªá th·ªëng",
                        "suggestion": "H√£y upload file PDF ho·∫∑c ƒë·∫∑t CV v√†o th∆∞ m·ª•c 'cvs/'"
                    }
                }
            
            print(f"üìÅ CV Agent: T√¨m th·∫•y {len(pdf_files)} file CV, b·∫Øt ƒë·∫ßu ph√¢n t√≠ch...")
            
            results = []
            for pdf_file in pdf_files:
                print(f"üìÑ CV Agent: Ph√¢n t√≠ch {pdf_file.name}")
                
                # Tr√≠ch xu·∫•t text t·ª´ PDF
                cv_text = self._extract_text_from_pdf(str(pdf_file))
                
                if cv_text.startswith("L·ªói"):
                    results.append({
                        "filename": pdf_file.name,
                        "error": cv_text
                    })
                    continue
                
                # Tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n
                cv_info = self._extract_cv_info(cv_text)
                
                # Ph√¢n t√≠ch b·∫±ng AI
                ai_analysis = await self._analyze_cv_with_ai(cv_text, user_input)
                
                results.append({
                    "filename": pdf_file.name,
                    "cv_info": cv_info,
                    "ai_analysis": ai_analysis,
                    "text_length": len(cv_text)
                })
            
            return {
                "agent": "cv_agent",
                "status": "success",
                "result": {
                    "all_cvs_analysis": results,
                    "total_cvs": len(pdf_files),
                    "timestamp": asyncio.get_event_loop().time()
                }
            }
            
        except Exception as e:
            return {
                "agent": "cv_agent",
                "status": "error",
                "error": f"L·ªói qu√©t t·∫•t c·∫£ CV: {str(e)}"
            }
    
    async def process(self, user_input: str, uploaded_files: List[str] = None) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω y√™u c·∫ßu ph√¢n t√≠ch CV v·ªõi kh·∫£ nƒÉng x·ª≠ l√Ω file upload
        """
        try:
            print(f"üîç CV Agent: X·ª≠ l√Ω y√™u c·∫ßu '{user_input}'")
            
            # X·ª≠ l√Ω file upload n·∫øu c√≥
            if uploaded_files:
                print(f"üìÅ CV Agent: X·ª≠ l√Ω {len(uploaded_files)} file(s) ƒë√£ upload")
                return await self._process_uploaded_files(uploaded_files, user_input)
            else:
                # N·∫øu kh√¥ng c√≥ file upload nh∆∞ng intent c√≥ CV, qu√©t t·∫•t c·∫£ CV
                if self._has_cv_intent(user_input):
                    print("üìÅ CV Agent: Kh√¥ng c√≥ file upload, qu√©t t·∫•t c·∫£ CV c√≥ s·∫µn")
                    return await self._scan_all_cvs(user_input)
                else:
                    return {
                        "agent": "cv_agent",
                        "status": "info",
                        "result": {
                            "message": "CV Agent s·∫µn s√†ng ph√¢n t√≠ch CV",
                            "usage": "Upload file PDF ho·∫∑c y√™u c·∫ßu ph√¢n t√≠ch CV c·ª• th·ªÉ",
                            "capabilities": [
                                "Ph√¢n t√≠ch CV t·ª´ file PDF",
                                "Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng",
                                "So s√°nh v·ªõi y√™u c·∫ßu c√¥ng vi·ªác",
                                "ƒê√°nh gi√° v√† khuy·∫øn ngh·ªã"
                            ]
                        }
                    }
            
        except Exception as e:
            return {
                "agent": "cv_agent",
                "status": "error",
                "error": str(e),
                "error_type": type(e).__name__
            }

# Test function
async def test_enhanced_cv_agent():
    """Test Enhanced CV Agent"""
    print("Testing Enhanced CV Agent")
    print("="*50)
    
    agent = EnhancedCVAgent()
    
    # Test 1: Kh√¥ng c√≥ file upload, kh√¥ng c√≥ CV intent
    print("\nTest 1: Kh√¥ng c√≥ CV intent")
    result1 = await agent.process("T√¨m nh√¢n vi√™n c√≥ l∆∞∆°ng cao nh·∫•t")
    print(f"Result: {result1['status']}")
    
    # Test 2: C√≥ CV intent nh∆∞ng kh√¥ng c√≥ file upload
    print("\nTest 2: C√≥ CV intent, kh√¥ng c√≥ file upload")
    result2 = await agent.process("Ph√¢n t√≠ch CV c·ªßa ·ª©ng vi√™n Python developer")
    print(f"Result: {result2['status']}")
    
    # Test 3: C√≥ file upload
    print("\nTest 3: C√≥ file upload")
    result3 = await agent.process("Ph√¢n t√≠ch CV n√†y", ["test_cv.pdf"])
    print(f"Result: {result3['status']}")

if __name__ == "__main__":
    asyncio.run(test_enhanced_cv_agent())
